// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user/user.proto

/*
Package go_micro_srv_user is a generated protocol buffer package.

It is generated from these files:
	proto/user/user.proto

It has these top-level messages:
	User
	Request
	Response
	Token
	Error
*/
package go_micro_srv_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Company  string `protobuf:"bytes,3,opt,name=company" json:"company,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Request struct {
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	User   *User    `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Users  []*User  `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Response) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Response) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Token struct {
	Token  string   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Valid  bool     `protobuf:"varint,2,opt,name=valid" json:"valid,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Token) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Error struct {
	Code        int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "go.micro.srv.user.User")
	proto.RegisterType((*Request)(nil), "go.micro.srv.user.Request")
	proto.RegisterType((*Response)(nil), "go.micro.srv.user.Response")
	proto.RegisterType((*Token)(nil), "go.micro.srv.user.Token")
	proto.RegisterType((*Error)(nil), "go.micro.srv.user.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Auth(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/go.micro.srv.user.UserService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/go.micro.srv.user.UserService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/go.micro.srv.user.UserService/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Auth(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/go.micro.srv.user.UserService/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/go.micro.srv.user.UserService/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Create(context.Context, *User) (*Response, error)
	Get(context.Context, *User) (*Response, error)
	GetAll(context.Context, *Request) (*Response, error)
	Auth(context.Context, *User) (*Token, error)
	ValidateToken(context.Context, *Token) (*Token, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.user.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.user.UserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.user.UserService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.user.UserService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Auth(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.user.UserService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ValidateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserService_GetAll_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _UserService_Auth_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _UserService_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/user.proto",
}

func init() { proto.RegisterFile("proto/user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x15, 0x7f, 0xa4, 0xe9, 0x84, 0x02, 0x1d, 0x35, 0xea, 0xca, 0xe5, 0x10, 0xed, 0x09,
	0x15, 0xe1, 0x40, 0xb9, 0x55, 0xe2, 0x50, 0x21, 0xd4, 0xbb, 0xf9, 0x3c, 0xb2, 0xd8, 0xa3, 0x74,
	0x85, 0xe3, 0x35, 0xbb, 0x1b, 0x23, 0x84, 0xb8, 0xf0, 0x0a, 0x5c, 0x78, 0x2c, 0x24, 0x5e, 0x81,
	0x07, 0x41, 0x3b, 0x4e, 0x10, 0x15, 0x49, 0x0e, 0xbd, 0xd8, 0x3b, 0xb3, 0x7f, 0xff, 0x76, 0x76,
	0xfe, 0x63, 0x98, 0xb4, 0xd6, 0x78, 0x33, 0x5b, 0x3a, 0xb2, 0xfc, 0xc8, 0x39, 0xc6, 0xc3, 0xb9,
	0xc9, 0x17, 0xba, 0xb4, 0x26, 0x77, 0xb6, 0xcb, 0xc3, 0x46, 0x76, 0x6f, 0x6e, 0xcc, 0xbc, 0xa6,
	0x99, 0x6a, 0xf5, 0x4c, 0x35, 0x8d, 0xf1, 0xca, 0x6b, 0xd3, 0xb8, 0xfe, 0x03, 0xd9, 0x41, 0xf2,
	0xca, 0x91, 0xc5, 0xdb, 0x10, 0xe9, 0x4a, 0x0c, 0xa6, 0x83, 0xfb, 0xfb, 0x45, 0xa4, 0x2b, 0x44,
	0x48, 0x1a, 0xb5, 0x20, 0x11, 0x71, 0x86, 0xd7, 0x28, 0x60, 0xaf, 0x34, 0x8b, 0x56, 0x35, 0x9f,
	0x45, 0xcc, 0xe9, 0x75, 0x88, 0x47, 0x90, 0xd2, 0x42, 0xe9, 0x5a, 0x24, 0x9c, 0xef, 0x03, 0xcc,
	0x60, 0xd4, 0x2a, 0xe7, 0x3e, 0x19, 0x5b, 0x89, 0x94, 0x37, 0xfe, 0xc6, 0x72, 0x1f, 0xf6, 0x0a,
	0xfa, 0xb8, 0x24, 0xe7, 0xe5, 0x8f, 0x01, 0x8c, 0x0a, 0x72, 0xad, 0x69, 0x1c, 0xe1, 0x03, 0x48,
	0x42, 0xd5, 0x5c, 0xc9, 0xf8, 0xec, 0x38, 0xff, 0xef, 0x3e, 0x79, 0x28, 0xb7, 0x60, 0x11, 0x3e,
	0x84, 0x34, 0xbc, 0x9d, 0x88, 0xa6, 0xf1, 0x2e, 0x75, 0xaf, 0xc2, 0x47, 0x30, 0x24, 0x6b, 0x8d,
	0x75, 0x22, 0x66, 0xbd, 0xd8, 0xa0, 0x7f, 0x1e, 0x04, 0xc5, 0x4a, 0x27, 0x09, 0xd2, 0x97, 0xe6,
	0x03, 0x35, 0xe1, 0x82, 0x3e, 0x2c, 0x56, 0x1d, 0xea, 0x83, 0x90, 0xed, 0x54, 0xad, 0x2b, 0xee,
	0xd2, 0xa8, 0xe8, 0x83, 0x1b, 0x1c, 0xf3, 0x14, 0x52, 0x4e, 0x84, 0xae, 0x97, 0xa6, 0x22, 0x3e,
	0x25, 0x2d, 0x78, 0x8d, 0x53, 0x18, 0x57, 0xe4, 0x4a, 0xab, 0xdb, 0xe0, 0xdb, 0xca, 0x90, 0x7f,
	0x53, 0x67, 0x3f, 0x63, 0x18, 0x87, 0x7b, 0xbe, 0x20, 0xdb, 0xe9, 0x92, 0xf0, 0x2d, 0x0c, 0x9f,
	0x59, 0x52, 0x9e, 0x70, 0x5b, 0x47, 0xb2, 0x93, 0x0d, 0x1b, 0x6b, 0x0f, 0xa4, 0xf8, 0xf6, 0xeb,
	0xf7, 0xf7, 0x08, 0xe5, 0x01, 0xcf, 0x4c, 0xf7, 0x98, 0x07, 0xcc, 0x9d, 0x0f, 0x4e, 0xf1, 0x0d,
	0xc4, 0x97, 0xe4, 0x6f, 0x88, 0xcd, 0x18, 0x7b, 0x84, 0x78, 0x0d, 0x3b, 0xfb, 0xa2, 0xab, 0xaf,
	0xa1, 0xe4, 0x4b, 0xf2, 0x17, 0x75, 0x8d, 0xd9, 0x46, 0x04, 0x4f, 0xca, 0x6e, 0xfc, 0x84, 0xf1,
	0x77, 0xf0, 0x7a, 0xd5, 0x58, 0x40, 0x72, 0xb1, 0xf4, 0x57, 0xdb, 0x6b, 0xde, 0x64, 0x0f, 0x9b,
	0x2e, 0x8f, 0x99, 0x78, 0x28, 0x6f, 0xad, 0x89, 0x6a, 0xe9, 0xaf, 0x42, 0x1b, 0xde, 0xc1, 0xc1,
	0xeb, 0x60, 0xb5, 0xf2, 0xd4, 0x8f, 0xc7, 0x56, 0xc6, 0x0e, 0xfa, 0x09, 0xd3, 0x27, 0xf2, 0xee,
	0x9a, 0xde, 0xad, 0x90, 0xe7, 0x83, 0xd3, 0xf7, 0x43, 0xfe, 0x3b, 0x9f, 0xfc, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x8b, 0xcd, 0x5d, 0xbc, 0xe7, 0x03, 0x00, 0x00,
}
